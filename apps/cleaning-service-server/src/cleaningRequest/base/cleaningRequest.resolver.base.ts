/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CleaningRequest } from "./CleaningRequest";
import { CleaningRequestCountArgs } from "./CleaningRequestCountArgs";
import { CleaningRequestFindManyArgs } from "./CleaningRequestFindManyArgs";
import { CleaningRequestFindUniqueArgs } from "./CleaningRequestFindUniqueArgs";
import { CreateCleaningRequestArgs } from "./CreateCleaningRequestArgs";
import { UpdateCleaningRequestArgs } from "./UpdateCleaningRequestArgs";
import { DeleteCleaningRequestArgs } from "./DeleteCleaningRequestArgs";
import { CleaningRequestService } from "../cleaningRequest.service";
@graphql.Resolver(() => CleaningRequest)
export class CleaningRequestResolverBase {
  constructor(protected readonly service: CleaningRequestService) {}

  async _cleaningRequestsMeta(
    @graphql.Args() args: CleaningRequestCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CleaningRequest])
  async cleaningRequests(
    @graphql.Args() args: CleaningRequestFindManyArgs
  ): Promise<CleaningRequest[]> {
    return this.service.cleaningRequests(args);
  }

  @graphql.Query(() => CleaningRequest, { nullable: true })
  async cleaningRequest(
    @graphql.Args() args: CleaningRequestFindUniqueArgs
  ): Promise<CleaningRequest | null> {
    const result = await this.service.cleaningRequest(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CleaningRequest)
  async createCleaningRequest(
    @graphql.Args() args: CreateCleaningRequestArgs
  ): Promise<CleaningRequest> {
    return await this.service.createCleaningRequest({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => CleaningRequest)
  async updateCleaningRequest(
    @graphql.Args() args: UpdateCleaningRequestArgs
  ): Promise<CleaningRequest | null> {
    try {
      return await this.service.updateCleaningRequest({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CleaningRequest)
  async deleteCleaningRequest(
    @graphql.Args() args: DeleteCleaningRequestArgs
  ): Promise<CleaningRequest | null> {
    try {
      return await this.service.deleteCleaningRequest(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
