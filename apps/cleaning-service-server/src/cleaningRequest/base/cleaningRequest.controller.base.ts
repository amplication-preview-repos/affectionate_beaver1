/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CleaningRequestService } from "../cleaningRequest.service";
import { CleaningRequestCreateInput } from "./CleaningRequestCreateInput";
import { CleaningRequest } from "./CleaningRequest";
import { CleaningRequestFindManyArgs } from "./CleaningRequestFindManyArgs";
import { CleaningRequestWhereUniqueInput } from "./CleaningRequestWhereUniqueInput";
import { CleaningRequestUpdateInput } from "./CleaningRequestUpdateInput";

export class CleaningRequestControllerBase {
  constructor(protected readonly service: CleaningRequestService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CleaningRequest })
  async createCleaningRequest(
    @common.Body() data: CleaningRequestCreateInput
  ): Promise<CleaningRequest> {
    return await this.service.createCleaningRequest({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        requestDate: true,
        description: true,
        status: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CleaningRequest] })
  @ApiNestedQuery(CleaningRequestFindManyArgs)
  async cleaningRequests(
    @common.Req() request: Request
  ): Promise<CleaningRequest[]> {
    const args = plainToClass(CleaningRequestFindManyArgs, request.query);
    return this.service.cleaningRequests({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        requestDate: true,
        description: true,
        status: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CleaningRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async cleaningRequest(
    @common.Param() params: CleaningRequestWhereUniqueInput
  ): Promise<CleaningRequest | null> {
    const result = await this.service.cleaningRequest({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        requestDate: true,
        description: true,
        status: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CleaningRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCleaningRequest(
    @common.Param() params: CleaningRequestWhereUniqueInput,
    @common.Body() data: CleaningRequestUpdateInput
  ): Promise<CleaningRequest | null> {
    try {
      return await this.service.updateCleaningRequest({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          requestDate: true,
          description: true,
          status: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CleaningRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCleaningRequest(
    @common.Param() params: CleaningRequestWhereUniqueInput
  ): Promise<CleaningRequest | null> {
    try {
      return await this.service.deleteCleaningRequest({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          requestDate: true,
          description: true,
          status: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
